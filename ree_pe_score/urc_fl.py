"""
   Generated by NETL's fuzzylogic package on 2022-07-07 08:55:06.883727.

   NOTE: This is an automated file; do not edit directly!!!
"""

from .fuzzylogic import FuzzyRule,FuzzyInput,FuzzyResult,FLCombiner,NoDataSentinel,FuzzyNoValError
from .fuzzylogic.fuzzycurves import *

NODATA_VAL=-99999.

def recordMissingKeys(indict):
   ret=[]
   if 'CID24' not in indict:
      ret.append('CID24')
   if 'CID20' not in indict:
      ret.append('CID20')
   if 'CID36' not in indict:
      ret.append('CID36')
   if 'CID01' not in indict:
      ret.append('CID01')
   if 'CID37' not in indict:
      ret.append('CID37')
   if 'CID04' not in indict:
      ret.append('CID04')
   if 'CID48' not in indict:
      ret.append('CID48')
   if 'CID39' not in indict:
      ret.append('CID39')
   if 'CID13' not in indict:
      ret.append('CID13')
   if 'CID44' not in indict:
      ret.append('CID44')
   if 'CID47' not in indict:
      ret.append('CID47')
   if 'CID38' not in indict:
      ret.append('CID38')
   if 'CID42' not in indict:
      ret.append('CID42')
   if 'CID43' not in indict:
      ret.append('CID43')
   if 'CID09' not in indict:
      ret.append('CID09')
   if 'CID29' not in indict:
      ret.append('CID29')
   if 'CID30' not in indict:
      ret.append('CID30')
   if 'CID51' not in indict:
      ret.append('CID51')
   if 'CID56' not in indict:
      ret.append('CID56')
   if 'CID03' not in indict:
      ret.append('CID03')
   if 'CID52' not in indict:
      ret.append('CID52')
   if 'CID14' not in indict:
      ret.append('CID14')
   if 'CID41' not in indict:
      ret.append('CID41')
   if 'CID57' not in indict:
      ret.append('CID57')
   if 'CID08' not in indict:
      ret.append('CID08')
   if 'CID21' not in indict:
      ret.append('CID21')
   if 'CID11' not in indict:
      ret.append('CID11')
   if 'CID31' not in indict:
      ret.append('CID31')
   if 'CID46' not in indict:
      ret.append('CID46')
   if 'CID02' not in indict:
      ret.append('CID02')
   if 'CID10' not in indict:
      ret.append('CID10')
   if 'CID15' not in indict:
      ret.append('CID15')
   if 'CID22' not in indict:
      ret.append('CID22')
   if 'CID06' not in indict:
      ret.append('CID06')
   if 'CID17' not in indict:
      ret.append('CID17')
   if 'CID05' not in indict:
      ret.append('CID05')
   if 'CID50' not in indict:
      ret.append('CID50')
   if 'CID16' not in indict:
      ret.append('CID16')
   if 'CID25' not in indict:
      ret.append('CID25')
   if 'CID53' not in indict:
      ret.append('CID53')
   if 'CID32' not in indict:
      ret.append('CID32')
   if 'CID40' not in indict:
      ret.append('CID40')
   if 'CID35' not in indict:
      ret.append('CID35')
   if 'CID34' not in indict:
      ret.append('CID34')
   if 'CID55' not in indict:
      ret.append('CID55')
   if 'CID19' not in indict:
      ret.append('CID19')
   if 'CID45' not in indict:
      ret.append('CID45')
   if 'CID59' not in indict:
      ret.append('CID59')
   if 'CID33' not in indict:
      ret.append('CID33')
   if 'CID07' not in indict:
      ret.append('CID07')
   if 'CID27' not in indict:
      ret.append('CID27')
   if 'CID54' not in indict:
      ret.append('CID54')
   if 'CID58' not in indict:
      ret.append('CID58')
   if 'CID18' not in indict:
      ret.append('CID18')
   if 'CID26' not in indict:
      ret.append('CID26')
   if 'CID12' not in indict:
      ret.append('CID12')
   if 'CID49' not in indict:
      ret.append('CID49')
   if 'CID28' not in indict:
      ret.append('CID28')
   if 'CID23' not in indict:
      ret.append('CID23')
   return ret

def initialize():
   _flsets={}
   Eo_inputs = {}
   input=FuzzyInput("CID10",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Eo_inputs[input.name]=input
   input=FuzzyInput("CID14",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Eo_inputs[input.name]=input
   input=FuzzyInput("CID16",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Eo_inputs[input.name]=input
   input=FuzzyInput("CID15",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Eo_inputs[input.name]=input
   input=FuzzyInput("CID20",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Eo_inputs[input.name]=input
   input=FuzzyInput("CID21",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Eo_inputs[input.name]=input
   input=FuzzyInput("CID22",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Eo_inputs[input.name]=input
   input=FuzzyInput("CID23",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Eo_inputs[input.name]=input
   result=FuzzyResult("Eo_PE_Score",0,1)
   curve=LinearCurve("linear")
   curve.yleft=0
   curve.yright=1.0
   result.add_curve(curve)
   _flsets["Eo"] = {"_inputs":Eo_inputs,"_result":result}
   Fl_inputs = {}
   input=FuzzyInput("CID01",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID02",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID03",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID04",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID05",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID06",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID07",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID08",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID09",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID10",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID11",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID12",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID13",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID17",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID18",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID19",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID20",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID21",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID22",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   input=FuzzyInput("CID23",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   Fl_inputs[input.name]=input
   result=FuzzyResult("Fl_PE_Score",0,1)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   result.add_curve(curve)
   _flsets["Fl"] = {"_inputs":Fl_inputs,"_result":result}
   HA_inputs = {}
   input=FuzzyInput("CID24",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID25",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID26",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID27",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID28",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID29",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID30",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID31",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID32",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID33",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID34",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID35",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID36",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID37",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID38",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID39",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID40",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID41",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID42",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID43",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID44",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID45",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID46",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID47",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID48",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID49",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID50",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID51",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID52",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID53",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID54",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID55",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID56",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID57",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID58",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   input=FuzzyInput("CID59",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HA_inputs[input.name]=input
   result=FuzzyResult("HA_PE_Score",0,1)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   result.add_curve(curve)
   _flsets["HA"] = {"_inputs":HA_inputs,"_result":result}
   HP_inputs = {}
   input=FuzzyInput("CID24",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID25",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID26",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID27",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID28",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID29",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID30",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID31",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID32",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID33",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID34",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID35",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID36",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID37",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID38",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID39",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID40",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID41",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID42",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID43",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID44",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID45",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID46",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID47",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID48",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID49",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID50",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID51",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID52",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID53",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID54",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID55",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID56",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID57",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID58",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   input=FuzzyInput("CID59",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   HP_inputs[input.name]=input
   result=FuzzyResult("HP_PE_Score",0,1)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   result.add_curve(curve)
   _flsets["HP"] = {"_inputs":HP_inputs,"_result":result}
   MA_inputs = {}
   input=FuzzyInput("CID24",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID25",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID26",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID27",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID28",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID29",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID30",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID31",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID32",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID33",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID34",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID35",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID36",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID37",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID38",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID39",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID40",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID41",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID42",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID43",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID44",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID45",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID46",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID47",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID48",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID49",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID50",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID51",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID52",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID53",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID54",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID55",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID56",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID57",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID58",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   input=FuzzyInput("CID59",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MA_inputs[input.name]=input
   result=FuzzyResult("MA_PE_Score",0,1)
   curve=LinearCurve("linear")
   curve.yleft=0
   curve.yright=1.0
   result.add_curve(curve)
   _flsets["MA"] = {"_inputs":MA_inputs,"_result":result}
   MP_inputs = {}
   input=FuzzyInput("CID24",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID25",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID26",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID27",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID28",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID29",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID30",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID31",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID32",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID33",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID34",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID35",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID36",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID37",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID38",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID39",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID40",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID41",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID42",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID43",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID44",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID45",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID46",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID47",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID48",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID49",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID50",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID51",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID52",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID53",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID54",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID55",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID56",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID57",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID58",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   input=FuzzyInput("CID59",0.0,3.0)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   input.add_curve(curve)
   MP_inputs[input.name]=input
   result=FuzzyResult("MP_PE_Score",0,1)
   curve=LinearCurve("linear")
   curve.yleft=0.0
   curve.yright=1.0
   result.add_curve(curve)
   _flsets["MP"] = {"_inputs":MP_inputs,"_result":result}
   _combiners={}
   _combiners["Eo"]=FLCombiner("""Eo""","smallest_of_maximum",defuzzDict={'Eo': 'smallest_of_maximum'})
   _combiners["Fl"]=FLCombiner("""Fl""","smallest_of_maximum",defuzzDict={'Fl': 'smallest_of_maximum'})
   _combiners["HA"]=FLCombiner("""HA""","smallest_of_maximum",defuzzDict={'HA': 'smallest_of_maximum'})
   _combiners["HP"]=FLCombiner("""HP""","smallest_of_maximum",defuzzDict={'HP': 'smallest_of_maximum'})
   _combiners["MA"]=FLCombiner("""MA""","smallest_of_maximum",defuzzDict={'MA': 'smallest_of_maximum'})
   _combiners["MP"]=FLCombiner("""MP""","smallest_of_maximum",defuzzDict={'MP': 'smallest_of_maximum'})
   return _flsets,_combiners

def gen_nodata_sentinel():
   # derived from Nodata method: ignore
   ret=NoDataSentinel()
   ret.ignore=True
   ret.subVal=None
   return ret

def _run_Eo(inVals,_inputs,_result):
   return _result.get_implication("linear",FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.andop(_inputs["CID10"].truth_for_statement(inVals["CID10"],"linear"),(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID14"].truth_for_statement(inVals["CID14"],"linear"),_inputs["CID15"].truth_for_statement(inVals["CID15"],"linear")),_inputs["CID16"].truth_for_statement(inVals["CID16"],"linear"))))),(FuzzyRule.andop(_inputs["CID20"].truth_for_statement(inVals["CID20"],"linear"),_inputs["CID21"].truth_for_statement(inVals["CID21"],"linear")))),(FuzzyRule.andop(_inputs["CID22"].truth_for_statement(inVals["CID22"],"linear"),_inputs["CID23"].truth_for_statement(inVals["CID23"],"linear")))))

def _run_Fl(inVals,_inputs,_result):
   return _result.get_implication("linear",FuzzyRule.andop(FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID01"].truth_for_statement(inVals["CID01"],"linear"),_inputs["CID02"].truth_for_statement(inVals["CID02"],"linear")),_inputs["CID03"].truth_for_statement(inVals["CID03"],"linear")),_inputs["CID04"].truth_for_statement(inVals["CID04"],"linear")),_inputs["CID05"].truth_for_statement(inVals["CID05"],"linear")),_inputs["CID06"].truth_for_statement(inVals["CID06"],"linear")),_inputs["CID07"].truth_for_statement(inVals["CID07"],"linear")),_inputs["CID08"].truth_for_statement(inVals["CID08"],"linear")),_inputs["CID09"].truth_for_statement(inVals["CID09"],"linear")),_inputs["CID10"].truth_for_statement(inVals["CID10"],"linear")),_inputs["CID11"].truth_for_statement(inVals["CID11"],"linear")),_inputs["CID12"].truth_for_statement(inVals["CID12"],"linear")),_inputs["CID13"].truth_for_statement(inVals["CID13"],"linear"))),(FuzzyRule.andop(FuzzyRule.andop(_inputs["CID17"].truth_for_statement(inVals["CID17"],"linear"),_inputs["CID18"].truth_for_statement(inVals["CID18"],"linear")),_inputs["CID19"].truth_for_statement(inVals["CID19"],"linear")))),(FuzzyRule.andop(_inputs["CID20"].truth_for_statement(inVals["CID20"],"linear"),_inputs["CID21"].truth_for_statement(inVals["CID21"],"linear")))),(FuzzyRule.andop(_inputs["CID22"].truth_for_statement(inVals["CID22"],"linear"),_inputs["CID23"].truth_for_statement(inVals["CID23"],"linear")))))

def _run_HA(inVals,_inputs,_result):
   return _result.get_implication("linear",FuzzyRule.andop(FuzzyRule.orop(FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID24"].truth_for_statement(inVals["CID24"],"linear"),_inputs["CID25"].truth_for_statement(inVals["CID25"],"linear")),_inputs["CID26"].truth_for_statement(inVals["CID26"],"linear")),_inputs["CID27"].truth_for_statement(inVals["CID27"],"linear")),_inputs["CID28"].truth_for_statement(inVals["CID28"],"linear")),_inputs["CID29"].truth_for_statement(inVals["CID29"],"linear")),_inputs["CID30"].truth_for_statement(inVals["CID30"],"linear")),_inputs["CID31"].truth_for_statement(inVals["CID31"],"linear")),_inputs["CID32"].truth_for_statement(inVals["CID32"],"linear")),_inputs["CID33"].truth_for_statement(inVals["CID33"],"linear")),_inputs["CID34"].truth_for_statement(inVals["CID34"],"linear")),_inputs["CID35"].truth_for_statement(inVals["CID35"],"linear")),_inputs["CID36"].truth_for_statement(inVals["CID36"],"linear")),_inputs["CID37"].truth_for_statement(inVals["CID37"],"linear")),_inputs["CID38"].truth_for_statement(inVals["CID38"],"linear")),_inputs["CID39"].truth_for_statement(inVals["CID39"],"linear")),_inputs["CID40"].truth_for_statement(inVals["CID40"],"linear")),_inputs["CID41"].truth_for_statement(inVals["CID41"],"linear")),_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear")),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID45"].truth_for_statement(inVals["CID45"],"linear"))),(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear"),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID45"].truth_for_statement(inVals["CID45"],"linear")))),(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID47"].truth_for_statement(inVals["CID47"],"linear"),_inputs["CID48"].truth_for_statement(inVals["CID48"],"linear")),_inputs["CID49"].truth_for_statement(inVals["CID49"],"linear")),_inputs["CID50"].truth_for_statement(inVals["CID50"],"linear")),_inputs["CID51"].truth_for_statement(inVals["CID51"],"linear")))),(FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.orop(FuzzyRule.orop(_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear"),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID45"].truth_for_statement(inVals["CID45"],"linear"))),_inputs["CID52"].truth_for_statement(inVals["CID52"],"linear")),_inputs["CID53"].truth_for_statement(inVals["CID53"],"linear")))),(FuzzyRule.andop(_inputs["CID59"].truth_for_statement(inVals["CID59"],"linear"),_inputs["CID54"].truth_for_statement(inVals["CID54"],"linear")))))

def _run_HP(inVals,_inputs,_result):
   return _result.get_implication("linear",FuzzyRule.andop(FuzzyRule.andop(FuzzyRule.andop(FuzzyRule.orop(FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID24"].truth_for_statement(inVals["CID24"],"linear"),_inputs["CID25"].truth_for_statement(inVals["CID25"],"linear")),_inputs["CID26"].truth_for_statement(inVals["CID26"],"linear")),_inputs["CID27"].truth_for_statement(inVals["CID27"],"linear")),_inputs["CID28"].truth_for_statement(inVals["CID28"],"linear")),_inputs["CID29"].truth_for_statement(inVals["CID29"],"linear")),_inputs["CID30"].truth_for_statement(inVals["CID30"],"linear")),_inputs["CID31"].truth_for_statement(inVals["CID31"],"linear")),_inputs["CID32"].truth_for_statement(inVals["CID32"],"linear")),_inputs["CID33"].truth_for_statement(inVals["CID33"],"linear")),_inputs["CID34"].truth_for_statement(inVals["CID34"],"linear")),_inputs["CID35"].truth_for_statement(inVals["CID35"],"linear")),_inputs["CID36"].truth_for_statement(inVals["CID36"],"linear")),_inputs["CID37"].truth_for_statement(inVals["CID37"],"linear")),_inputs["CID38"].truth_for_statement(inVals["CID38"],"linear")),_inputs["CID39"].truth_for_statement(inVals["CID39"],"linear")),_inputs["CID40"].truth_for_statement(inVals["CID40"],"linear")),_inputs["CID41"].truth_for_statement(inVals["CID41"],"linear")),_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear")),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID45"].truth_for_statement(inVals["CID45"],"linear"))),(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear"),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID45"].truth_for_statement(inVals["CID45"],"linear")))),(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID47"].truth_for_statement(inVals["CID47"],"linear"),_inputs["CID48"].truth_for_statement(inVals["CID48"],"linear")),_inputs["CID49"].truth_for_statement(inVals["CID49"],"linear")),_inputs["CID50"].truth_for_statement(inVals["CID50"],"linear")),_inputs["CID51"].truth_for_statement(inVals["CID51"],"linear")))),(FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.orop(FuzzyRule.orop(_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear"),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID45"].truth_for_statement(inVals["CID45"],"linear"))),_inputs["CID52"].truth_for_statement(inVals["CID52"],"linear")),_inputs["CID53"].truth_for_statement(inVals["CID53"],"linear")))),_inputs["CID55"].truth_for_statement(inVals["CID55"],"linear")),_inputs["CID56"].truth_for_statement(inVals["CID56"],"linear")),(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID58"].truth_for_statement(inVals["CID58"],"linear"),_inputs["CID57"].truth_for_statement(inVals["CID57"],"linear")),(FuzzyRule.andop(_inputs["CID46"].truth_for_statement(inVals["CID46"],"linear"),(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear"),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID45"].truth_for_statement(inVals["CID45"],"linear")))))))))

def _run_MA(inVals,_inputs,_result):
   return _result.get_implication("linear",FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID24"].truth_for_statement(inVals["CID24"],"linear"),_inputs["CID25"].truth_for_statement(inVals["CID25"],"linear")),_inputs["CID26"].truth_for_statement(inVals["CID26"],"linear")),_inputs["CID27"].truth_for_statement(inVals["CID27"],"linear")),_inputs["CID28"].truth_for_statement(inVals["CID28"],"linear")),_inputs["CID29"].truth_for_statement(inVals["CID29"],"linear")),_inputs["CID30"].truth_for_statement(inVals["CID30"],"linear")),_inputs["CID31"].truth_for_statement(inVals["CID31"],"linear")),_inputs["CID32"].truth_for_statement(inVals["CID32"],"linear")),_inputs["CID33"].truth_for_statement(inVals["CID33"],"linear")),_inputs["CID34"].truth_for_statement(inVals["CID34"],"linear")),_inputs["CID35"].truth_for_statement(inVals["CID35"],"linear")),_inputs["CID36"].truth_for_statement(inVals["CID36"],"linear")),_inputs["CID37"].truth_for_statement(inVals["CID37"],"linear")),_inputs["CID38"].truth_for_statement(inVals["CID38"],"linear")),_inputs["CID39"].truth_for_statement(inVals["CID39"],"linear")),_inputs["CID40"].truth_for_statement(inVals["CID40"],"linear")),_inputs["CID41"].truth_for_statement(inVals["CID41"],"linear"))),(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID47"].truth_for_statement(inVals["CID47"],"linear"),_inputs["CID48"].truth_for_statement(inVals["CID48"],"linear")),_inputs["CID49"].truth_for_statement(inVals["CID49"],"linear")),_inputs["CID50"].truth_for_statement(inVals["CID50"],"linear")))),(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear"),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID44"].truth_for_statement(inVals["CID44"],"linear"))))),(FuzzyRule.andop(FuzzyRule.andop(_inputs["CID51"].truth_for_statement(inVals["CID51"],"linear"),(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear"),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID44"].truth_for_statement(inVals["CID44"],"linear")))),_inputs["CID52"].truth_for_statement(inVals["CID52"],"linear")))),(FuzzyRule.andop(FuzzyRule.andop(_inputs["CID59"].truth_for_statement(inVals["CID59"],"linear"),_inputs["CID54"].truth_for_statement(inVals["CID54"],"linear")),_inputs["CID53"].truth_for_statement(inVals["CID53"],"linear")))))

def _run_MP(inVals,_inputs,_result):
   return _result.get_implication("linear",FuzzyRule.andop(FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.andop(FuzzyRule.andop((FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID24"].truth_for_statement(inVals["CID24"],"linear"),_inputs["CID25"].truth_for_statement(inVals["CID25"],"linear")),_inputs["CID26"].truth_for_statement(inVals["CID26"],"linear")),_inputs["CID27"].truth_for_statement(inVals["CID27"],"linear")),_inputs["CID28"].truth_for_statement(inVals["CID28"],"linear")),_inputs["CID29"].truth_for_statement(inVals["CID29"],"linear")),_inputs["CID30"].truth_for_statement(inVals["CID30"],"linear")),_inputs["CID31"].truth_for_statement(inVals["CID31"],"linear")),_inputs["CID32"].truth_for_statement(inVals["CID32"],"linear")),_inputs["CID33"].truth_for_statement(inVals["CID33"],"linear")),_inputs["CID34"].truth_for_statement(inVals["CID34"],"linear")),_inputs["CID35"].truth_for_statement(inVals["CID35"],"linear")),_inputs["CID36"].truth_for_statement(inVals["CID36"],"linear")),_inputs["CID37"].truth_for_statement(inVals["CID37"],"linear")),_inputs["CID38"].truth_for_statement(inVals["CID38"],"linear")),_inputs["CID39"].truth_for_statement(inVals["CID39"],"linear")),_inputs["CID40"].truth_for_statement(inVals["CID40"],"linear")),_inputs["CID41"].truth_for_statement(inVals["CID41"],"linear"))),(FuzzyRule.orop(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID47"].truth_for_statement(inVals["CID47"],"linear"),_inputs["CID48"].truth_for_statement(inVals["CID48"],"linear")),_inputs["CID49"].truth_for_statement(inVals["CID49"],"linear")),_inputs["CID50"].truth_for_statement(inVals["CID50"],"linear")))),(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear"),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID44"].truth_for_statement(inVals["CID44"],"linear"))))),(FuzzyRule.andop(FuzzyRule.andop(_inputs["CID51"].truth_for_statement(inVals["CID51"],"linear"),(FuzzyRule.orop(FuzzyRule.orop(_inputs["CID42"].truth_for_statement(inVals["CID42"],"linear"),_inputs["CID43"].truth_for_statement(inVals["CID43"],"linear")),_inputs["CID44"].truth_for_statement(inVals["CID44"],"linear")))),_inputs["CID52"].truth_for_statement(inVals["CID52"],"linear")))),(FuzzyRule.andop(_inputs["CID53"].truth_for_statement(inVals["CID53"],"linear"),_inputs["CID55"].truth_for_statement(inVals["CID55"],"linear")))),(FuzzyRule.andop(_inputs["CID56"].truth_for_statement(inVals["CID56"],"linear"),(FuzzyRule.orop(_inputs["CID58"].truth_for_statement(inVals["CID58"],"linear"),_inputs["CID57"].truth_for_statement(inVals["CID57"],"linear")))))))

def get_implications(_flsets,inVals):
   _impls={}
   try:
      _impls["Eo"]=_run_Eo(inVals,**_flsets["Eo"])
   except FuzzyNoValError as err:
      _impls["Eo"]=err
   try:
      _impls["Fl"]=_run_Fl(inVals,**_flsets["Fl"])
   except FuzzyNoValError as err:
      _impls["Fl"]=err
   try:
      _impls["HA"]=_run_HA(inVals,**_flsets["HA"])
   except FuzzyNoValError as err:
      _impls["HA"]=err
   try:
      _impls["HP"]=_run_HP(inVals,**_flsets["HP"])
   except FuzzyNoValError as err:
      _impls["HP"]=err
   try:
      _impls["MA"]=_run_MA(inVals,**_flsets["MA"])
   except FuzzyNoValError as err:
      _impls["MA"]=err
   try:
      _impls["MP"]=_run_MP(inVals,**_flsets["MP"])
   except FuzzyNoValError as err:
      _impls["MP"]=err
   return _impls

def apply_combiners(_impls,_combiners,addl_args=None):
   _ret={}
   try:
      _ret["Eo"]=_combiners["Eo"].evaluate(_impls,addl_args)
   except FuzzyNoValError:
      _ret["Eo"]=NODATA_VAL
   try:
      _ret["Fl"]=_combiners["Fl"].evaluate(_impls,addl_args)
   except FuzzyNoValError:
      _ret["Fl"]=NODATA_VAL
   try:
      _ret["HA"]=_combiners["HA"].evaluate(_impls,addl_args)
   except FuzzyNoValError:
      _ret["HA"]=NODATA_VAL
   try:
      _ret["HP"]=_combiners["HP"].evaluate(_impls,addl_args)
   except FuzzyNoValError:
      _ret["HP"]=NODATA_VAL
   try:
      _ret["MA"]=_combiners["MA"].evaluate(_impls,addl_args)
   except FuzzyNoValError:
      _ret["MA"]=NODATA_VAL
   try:
      _ret["MP"]=_combiners["MP"].evaluate(_impls,addl_args)
   except FuzzyNoValError:
      _ret["MP"]=NODATA_VAL
   return _ret

