import sys
from osgeo import gdal,ogr,osr
import pandas as pd
from typing import Tuple,List,Union,Dict,Callable,Optional,Protocol,Any,Set
from .common_utils import REE_Workspace
import numpy as np

class RasterGroup(object):

    _rasters: Dict[str,gdal.Dataset]
    _cached_ref: Optional[gdal.Dataset]

    def __init__(self, **kwargs): ...
    def __repr__(self)->str: ...
    def __getitem__(self, item:str)->gdal.Dataset: ...
    def __setitem__(self, key:str, value:Union[str,gdal.Dataset]): ...
    def __delitem__(self, key:str): ...
    def items(self)->Set[Tuple[str,gdal.Dataset]]: ...
    def add(self, id:str, path_or_ds:Union[str,gdal.Dataset]): ...
    def generateHitMap(self,keys:Optional[List[str]]=...)->Tuple[List[str],np.ndarray]: ...
    def generateNoDataMask(self)->np.ndarray: ...
    def copyRasters(self, driver:Union[str,gdal.Driver], path:str, suffix:str=...)->List[gdal.Dataset]: ...
    def _getTestRaster(self)->Optional[gdal.Dataset]: ...

    @property
    def rasterNames(self)->List[str]: ...
    @property
    def extents(self)->Tuple[float,float,float,float]: ...
    @property
    def projection(self)->str: ...
    @property
    def geoTransform(self)->Tuple[float,float,float,float,float,float]: ...
    @property
    def spatialRef(self)->osr.SpatialReference: ...
    @property
    def RasterXSize(self)->int: ...
    @property
    def RasterYSize(self)->int: ...

def ListFeatureClassNames(ds:gdal.Dataset,wildCard:str,first_char:int=0, last_char:int=sys.maxsize) ->List[str]:
    ...

def ListFeatureClasses(ds:gdal.Dataset,wildCard:str) ->List[ogr.Layer]:
    ...

def FindUniqueComponents(gdbDS : gdal.Dataset,prefix : str) -> Dict[str,List[List[ogr.Layer]]]:
    ...

def RasterizeComponents(src_rasters:RasterGroup,gdbDS:gdal.Dataset,component_data:Dict[str,List[List[ogr.Layer]]],cache_dir:Optional[str]=...,mask:Optional[np.ndarray]=...)->RasterGroup:
    ...

def GenDomainHitMaps(src_rasters:RasterGroup)->Dict[str,Tuple[np.ndarray,List[bool]]]:
    ...

def GenDomainIndexRasters(src_rasters:RasterGroup, as_distance:bool, cache_dir:Optional[str]=..., mask:Optional[np.ndarray]=...)->Tuple[RasterGroup, Dict[str, np.ndarray]]:
    ...

def FindDomainComponentRasters(domDistRasters:RasterGroup,hitMaps:Dict[str,np.ndarray],testRasters:RasterGroup,cache_dir:str=None)->RasterGroup:
    ...

def CombineDomDistRasters(found:Set[int],domKey:str,compName:str,domDistRasters:RasterGroup,comboRasters:RasterGroup,prefix:str=...,suffix:str=...,drvrName:str=...):
    ...

def NormMultRasters(implicits:RasterGroup,explicits:RasterGroup,cache_dir:str=...)->RasterGroup:
    ...

def Rasterize(id:str,fc_list:List[List[ogr.Layer]],inDS:gdal.Dataset,xSize:int,ySize:int,geotrans:Tuple[float,float,float,float,float,float],
              srs:osr.SpatialReference,drvrName:str=...,prefix:str=...,suffix:str=...,nodata:int=...,
              gdType:int=...)->gdal.Dataset:
    ...

def RasterCopy(id:str,inDS:gdal.Dataset, drvrName:str=..., prefix:str=..., suffix:str=...,gdType:int=...)->gdal.Dataset:
    ...

def RasterDistance(id:str,inDS:gdal.Dataset, drvrName:str=..., prefix:str=..., suffix:str=...,gdType:int=...)->gdal.Dataset:
    ...

def normalizeRaster(inRast:gdal.Dataset,flip:bool=...)->Tuple[np.ndarray,float]:
    ...

def MultBandData(data1:np.ndarray,data2:np.ndarray,id:str,nd1:float,nd2:float,geotrans:Tuple[float,float,float,float,float,float],spatRef:osr.SpatialReference,drvrName:str=...)->gdal.Dataset:
    ...

def buildPandasDataframe(indexRasters:RasterGroup,daRasters:RasterGroup)->pd.DataFrame:
    ...

def DataFrameToRasterGroup(df:pd.DataFrame,lgInd:Union[str,gdal.Dataset],cols:Optional[List[str]]=...,gdtype:int=...)->RasterGroup:
    ...
